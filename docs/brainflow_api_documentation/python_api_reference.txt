
Python API Reference
brainflow.board_shim

class brainflow.board_shim.BoardIds(value)

    Bases: enum.IntEnum

    Enum to store all supported Board Ids

    PLAYBACK_FILE_BOARD = -3

    STREAMING_BOARD = -2

    SYNTHETIC_BOARD = -1

    CYTON_BOARD = 0

    GANGLION_BOARD = 1

    CYTON_DAISY_BOARD = 2

    GALEA_BOARD = 3

    GANGLION_WIFI_BOARD = 4

    CYTON_WIFI_BOARD = 5

    CYTON_DAISY_WIFI_BOARD = 6

    BRAINBIT_BOARD = 7

    UNICORN_BOARD = 8

    CALLIBRI_EEG_BOARD = 9

    CALLIBRI_EMG_BOARD = 10

    CALLIBRI_ECG_BOARD = 11

    NOTION_1_BOARD = 13

    NOTION_2_BOARD = 14

    GFORCE_PRO_BOARD = 16

    FREEEEG32_BOARD = 17

    BRAINBIT_BLED_BOARD = 18

    GFORCE_DUAL_BOARD = 19

    GALEA_SERIAL_BOARD = 20

    MUSE_S_BLED_BOARD = 21

    MUSE_2_BLED_BOARD = 22

    CROWN_BOARD = 23

    ANT_NEURO_EE_410_BOARD = 24

    ANT_NEURO_EE_411_BOARD = 25

    ANT_NEURO_EE_430_BOARD = 26

    ANT_NEURO_EE_211_BOARD = 27

    ANT_NEURO_EE_212_BOARD = 28

    ANT_NEURO_EE_213_BOARD = 29

    ANT_NEURO_EE_214_BOARD = 30

    ANT_NEURO_EE_215_BOARD = 31

    ANT_NEURO_EE_221_BOARD = 32

    ANT_NEURO_EE_222_BOARD = 33

    ANT_NEURO_EE_223_BOARD = 34

    ANT_NEURO_EE_224_BOARD = 35

    ANT_NEURO_EE_225_BOARD = 36

    ENOPHONE_BOARD = 37

    MUSE_2_BOARD = 38

    MUSE_S_BOARD = 39

    BRAINALIVE_BOARD = 40

    MUSE_2016_BOARD = 41

    MUSE_2016_BLED_BOARD = 42

    EXPLORE_4_CHAN_BOARD = 44

    EXPLORE_8_CHAN_BOARD = 45

    GANGLION_NATIVE_BOARD = 46

    EMOTIBIT_BOARD = 47

    GALEA_BOARD_V4 = 48

    GALEA_SERIAL_BOARD_V4 = 49

    NTL_WIFI_BOARD = 50

    ANT_NEURO_EE_511_BOARD = 51

    FREEEEG128_BOARD = 52

    AAVAA_V3_BOARD = 53

    EXPLORE_PLUS_8_CHAN_BOARD = 54

    EXPLORE_PLUS_32_CHAN_BOARD = 55

    PIEEG_BOARD = 56

    NEUROPAWN_KNIGHT_BOARD = 57

class brainflow.board_shim.IpProtocolTypes(value)

    Bases: enum.IntEnum

    Enum to store Ip Protocol types

    NO_IP_PROTOCOL = 0

    UDP = 1

    TCP = 2

class brainflow.board_shim.BrainFlowPresets(value)

    Bases: enum.IntEnum

    Enum to store presets

    DEFAULT_PRESET = 0

    AUXILIARY_PRESET = 1

    ANCILLARY_PRESET = 2

class brainflow.board_shim.BrainFlowInputParams

    Bases: object

    inputs parameters for prepare_session method

    Parameters

            serial_port (str) – serial port name is used for boards which reads data from serial port

            mac_address (str) – mac address for example its used for bluetooth based boards

            ip_address (str) – ip address is used for boards which reads data from socket connection

            ip_address_aux (str) – ip address is used for boards which reads data from socket connection

            ip_address_anc (str) – ip address is used for boards which reads data from socket connection

            ip_port (int) – ip port for socket connection, for some boards where we know it in front you dont need this parameter

            ip_port_aux (int) – ip port for socket connection, for some boards where we know it in front you dont need this parameter

            ip_port_anc (int) – ip port for socket connection, for some boards where we know it in front you dont need this parameter

            ip_protocol (int) – ip protocol type from IpProtocolTypes enum

            other_info (str) – other info

            serial_number (str) – serial number

            file (str) – file

            file_aux (str) – file

            file_anc (str) – file

class brainflow.board_shim.BoardShim(board_id: int, input_params: brainflow.board_shim.BrainFlowInputParams)

    Bases: object

    BoardShim class is a primary interface to all boards

    Parameters

            board_id (int) – Id of your board

            input_params (BrainFlowInputParams) – board specific structure to pass required arguments

    classmethod set_log_level(log_level: int) → None

        set BrainFlow log level, use it only if you want to write your own messages to BrainFlow logger, otherwise use enable_board_logger, enable_dev_board_logger or disable_board_logger

        Parameters

            log_level (int) – log level, to specify it you should use values from LogLevels enum

    classmethod enable_board_logger() → None

        enable BrainFlow Logger with level INFO, uses stderr for log messages by default

    classmethod disable_board_logger() → None

        disable BrainFlow Logger

    classmethod enable_dev_board_logger() → None

        enable BrainFlow Logger with level TRACE, uses stderr for log messages by default

    classmethod log_message(log_level: int, message: str) → None

        write your own log message to BrainFlow logger, use it if you wanna have single logger for your own code and BrainFlow’s code

        Parameters

                log_level – log level

                message (str) – message

    classmethod set_log_file(log_file: str) → None

        redirect logger from stderr to file, can be called any time

        Parameters

            log_file (str) – log file name

    classmethod get_sampling_rate(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → int

        get sampling rate for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            sampling rate for this board id
        Return type

            int
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_package_num_channel(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → int

        get package num channel for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            number of package num channel
        Return type

            int
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_battery_channel(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → int

        get battery channel for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            number of batter channel
        Return type

            int
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_num_rows(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → int

        get number of rows in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            number of rows in returned numpy array
        Return type

            int
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_timestamp_channel(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → int

        get timestamp channel in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            number of timestamp channel in returned numpy array
        Return type

            int
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_marker_channel(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → int

        get marker channel in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            number of marker channel in returned numpy array
        Return type

            int
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_eeg_names(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[str]

        get names of EEG channels in 10-20 system if their location is fixed

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            EEG channels names
        Return type

            List[str]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_board_presets(board_id: int) → List[str]

        get available presets for this board id

        Parameters

            board_id (int) – Board Id
        Returns

            presets for this board id
        Return type

            List[str]
        Raises

            BrainFlowError – In case of internal error or invalid args

    classmethod get_version() → str

        get version of brainflow libraries

        Returns

            version
        Return type

            str
        Raises

            BrainFlowError – In case of internal error or invalid args

    classmethod get_board_descr(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>)

        get board description as json

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            info about board
        Return type

            json
        Raises

            BrainFlowError – If there is no such board id exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_device_name(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → str

        get device name

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            Device Name
        Return type

            str
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_eeg_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of eeg channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of eeg channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_exg_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of exg channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of eeg channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_emg_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of emg channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of eeg channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_ecg_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of ecg channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of ecg channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_eog_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of eog channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of eog channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_eda_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of eda channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of eda channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_ppg_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of ppg channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of ppg channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_accel_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of accel channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of accel channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_rotation_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of rotation channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of rotation channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_analog_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of analog channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of analog channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_gyro_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of gyro channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of gyro channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_other_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of other channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of other channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_temperature_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of temperature channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of temperature channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_resistance_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of resistance channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of resistance channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod get_magnetometer_channels(board_id: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → List[int]

        get list of magnetometer channels in resulting data table for a board

        Parameters

                board_id (int) – Board Id

                preset (int) – preset

        Returns

            list of magnetometer channels in returned numpy array
        Return type

            List[int]
        Raises

            BrainFlowError – If this board has no such data exit code is UNSUPPORTED_BOARD_ERROR

    classmethod release_all_sessions() → None

        release all prepared sessions

    prepare_session() → None

        prepare streaming sesssion, init resources, you need to call it before any other BoardShim object methods

    add_streamer(streamer_params: str, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → None

        Add streamer

        Parameters

                preset (int) – preset

                parameter to stream data from brainflow, supported vals (streamer_params) – “file://%file_name%:w”, “file://%file_name%:a”, “streaming_board://%multicast_group_ip%:%port%”. Range for multicast addresses is from “224.0.0.0” to “239.255.255.255”

    delete_streamer(streamer_params: str, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → None

        Delete streamer

        Parameters

                preset (int) – preset

                parameter to stream data from brainflow, supported vals (streamer_params) – “file://%file_name%:w”, “file://%file_name%:a”, “streaming_board://%multicast_group_ip%:%port%”. Range for multicast addresses is from “224.0.0.0” to “239.255.255.255”

    start_stream(num_samples: int = 450000, streamer_params: Optional[str] = None) → None

        Start streaming data, this methods stores data in ringbuffer

        Parameters

                num_samples (int) – size of ring buffer to keep data

                parameter to stream data from brainflow, supported vals (streamer_params) – “file://%file_name%:w”, “file://%file_name%:a”, “streaming_board://%multicast_group_ip%:%port%”. Range for multicast addresses is from “224.0.0.0” to “239.255.255.255”

    stop_stream() → None

        Stop streaming data

    release_session() → None

        release all resources

    get_current_board_data(num_samples: int, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>)

        Get specified amount of data or less if there is not enough data, doesnt remove data from ringbuffer

        Parameters

                num_samples (int) – max number of samples

                preset (int) – preset

        Returns

            latest data from a board
        Return type

            NDArray[Shape[“*, *”], Float64]

    get_board_data_count(preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → int

        Get num of elements in ringbuffer

        Parameters

            preset (int) – preset
        Returns

            number of elements in ring buffer
        Return type

            int

    get_board_id() → int

        Get’s the actual board id, can be different than provided

        Returns

            board id
        Return type

            int

    insert_marker(value: float, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>) → None

        Insert Marker to Data Stream

        Parameters

                value (float) – value to insert

                preset (int) – preset

        Returns

            board id
        Return type

            int

    is_prepared() → bool

        Check if session is ready or not

        Returns

            session status
        Return type

            bool

    get_board_data(num_samples=None, preset: int = <BrainFlowPresets.DEFAULT_PRESET: 0>)

        Get board data and remove data from ringbuffer

        Parameters

                num_samples (int) – number of packages to get

                preset (int) – preset

        Returns

            all data from a board if num_samples is None, num_samples packages or less if not None
        Return type

            NDArray[Shape[“*, *”], Float64]

    config_board(config) → str

        Use this method carefully and only if you understand what you are doing, do NOT use it to start or stop streaming

        Parameters

            config (str) – string to send to a board
        Returns

            response string if any
        Return type

            str

    config_board_with_bytes(bytes_to_send) → None

        Use this method carefully and only if you understand what you are doing

        Parameters

            bytes_to_send – bytes to send

brainflow.exit_codes

exception brainflow.exit_codes.BrainFlowError(message: str, exit_code: int)

    Bases: Exception

    This exception is raised if non-zero exit code is returned from C code

    Parameters

            message (str) – exception message

            exit_code (int) – exit code flow low level API

class brainflow.exit_codes.BrainFlowExitCodes(value)

    Bases: enum.IntEnum

    Enum to store all possible exit codes

    STATUS_OK = 0

    PORT_ALREADY_OPEN_ERROR = 1

    UNABLE_TO_OPEN_PORT_ERROR = 2

    SER_PORT_ERROR = 3

    BOARD_WRITE_ERROR = 4

    INCOMMING_MSG_ERROR = 5

    INITIAL_MSG_ERROR = 6

    BOARD_NOT_READY_ERROR = 7

    STREAM_ALREADY_RUN_ERROR = 8

    INVALID_BUFFER_SIZE_ERROR = 9

    STREAM_THREAD_ERROR = 10

    STREAM_THREAD_IS_NOT_RUNNING = 11

    EMPTY_BUFFER_ERROR = 12

    INVALID_ARGUMENTS_ERROR = 13

    UNSUPPORTED_BOARD_ERROR = 14

    BOARD_NOT_CREATED_ERROR = 15

    ANOTHER_BOARD_IS_CREATED_ERROR = 16

    GENERAL_ERROR = 17

    SYNC_TIMEOUT_ERROR = 18

    JSON_NOT_FOUND_ERROR = 19

    NO_SUCH_DATA_IN_JSON_ERROR = 20

    CLASSIFIER_IS_NOT_PREPARED_ERROR = 21

    ANOTHER_CLASSIFIER_IS_PREPARED_ERROR = 22

    UNSUPPORTED_CLASSIFIER_AND_METRIC_COMBINATION_ERROR = 23

brainflow.data_filter

class brainflow.data_filter.FilterTypes(value)

    Bases: enum.IntEnum

    Enum to store all supported Filter Types

    BUTTERWORTH = 0

    CHEBYSHEV_TYPE_1 = 1

    BESSEL = 2

    BUTTERWORTH_ZERO_PHASE = 3

    CHEBYSHEV_TYPE_1_ZERO_PHASE = 4

    BESSEL_ZERO_PHASE = 5

class brainflow.data_filter.AggOperations(value)

    Bases: enum.IntEnum

    Enum to store all supported aggregation operations

    MEAN = 0

    MEDIAN = 1

    EACH = 2

class brainflow.data_filter.WindowOperations(value)

    Bases: enum.IntEnum

    Enum to store all supported window functions

    NO_WINDOW = 0

    HANNING = 1

    HAMMING = 2

    BLACKMAN_HARRIS = 3

class brainflow.data_filter.DetrendOperations(value)

    Bases: enum.IntEnum

    Enum to store all supported detrend options

    NO_DETREND = 0

    CONSTANT = 1

    LINEAR = 2

class brainflow.data_filter.NoiseTypes(value)

    Bases: enum.IntEnum

    Enum to store noise types

    FIFTY = 0

    SIXTY = 1

    FIFTY_AND_SIXTY = 2

class brainflow.data_filter.WaveletDenoisingTypes(value)

    Bases: enum.IntEnum

    Enum to store all supported wavelet denoising methods

    VISUSHRINK = 0

    SURESHRINK = 1

class brainflow.data_filter.ThresholdTypes(value)

    Bases: enum.IntEnum

    Enum to store all supported thresholding types

    SOFT = 0

    HARD = 1

class brainflow.data_filter.WaveletExtensionTypes(value)

    Bases: enum.IntEnum

    Enum to store all supported wavelet extension types

    SYMMETRIC = 0

    PERIODIC = 1

class brainflow.data_filter.NoiseEstimationLevelTypes(value)

    Bases: enum.IntEnum

    Enum to store all supported values for noise estemation levels in wavelet denoising

    FIRST_LEVEL = 0

    ALL_LEVELS = 1

class brainflow.data_filter.WaveletTypes(value)

    Bases: enum.IntEnum

    Enum to store all supported wavelets

    HAAR = 0

    DB1 = 1

    DB2 = 2

    DB3 = 3

    DB4 = 4

    DB5 = 5

    DB6 = 6

    DB7 = 7

    DB8 = 8

    DB9 = 9

    DB10 = 10

    DB11 = 11

    DB12 = 12

    DB13 = 13

    DB14 = 14

    DB15 = 15

    BIOR1_1 = 16

    BIOR1_3 = 17

    BIOR1_5 = 18

    BIOR2_2 = 19

    BIOR2_4 = 20

    BIOR2_6 = 21

    BIOR2_8 = 22

    BIOR3_1 = 23

    BIOR3_3 = 24

    BIOR3_5 = 25

    BIOR3_7 = 26

    BIOR3_9 = 27

    BIOR4_4 = 28

    BIOR5_5 = 29

    BIOR6_8 = 30

    COIF1 = 31

    COIF2 = 32

    COIF3 = 33

    COIF4 = 34

    COIF5 = 35

    SYM2 = 36

    SYM3 = 37

    SYM4 = 38

    SYM5 = 39

    SYM6 = 40

    SYM7 = 41

    SYM8 = 42

    SYM9 = 43

    SYM10 = 44

class brainflow.data_filter.DataFilter

    Bases: object

    DataFilter class contains methods for signal processig

    classmethod set_log_level(log_level: int) → None

        set BrainFlow log level, use it only if you want to write your own messages to BrainFlow logger, otherwise use enable_data_logger, enable_dev_data_logger or disable_data_logger

        Parameters

            log_level (int) – log level, to specify it you should use values from LogLevels enum

    classmethod enable_data_logger() → None

        enable Data Logger with level INFO, uses stderr for log messages by default

    classmethod disable_data_logger() → None

        disable Data Logger

    classmethod enable_dev_data_logger() → None

        enable Data Logger with level TRACE, uses stderr for log messages by default

    classmethod set_log_file(log_file: str) → None

        redirect logger from stderr to file, can be called any time

        Parameters

            log_file (str) – log file name

    classmethod perform_lowpass(data, sampling_rate: int, cutoff: float, order: int, filter_type: int, ripple: float) → None

        apply low pass filter to provided data

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to filter, filter works in-place

                sampling_rate (int) – board’s sampling rate

                cutoff (float) – cutoff frequency

                order (int) – filter order

                filter_type (int) – filter type from special enum

                ripple (float) – ripple value for Chebyshev filter

    classmethod perform_highpass(data, sampling_rate: int, cutoff: float, order: int, filter_type: int, ripple: float) → None

        apply high pass filter to provided data

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to filter, filter works in-place

                sampling_rate (int) – board’s sampling rate

                cutoff (float) – cutoff frequency

                order (int) – filter order

                filter_type (int) – filter type from special enum

                ripple (float) – ripple value for Chebyshev filter

    classmethod perform_bandpass(data, sampling_rate: int, start_freq: float, stop_freq: float, order: int, filter_type: int, ripple: float) → None

        apply band pass filter to provided data

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to filter, filter works in-place

                sampling_rate (int) – board’s sampling rate

                start_freq (float) – start frequency

                stop_freq (float) – stop frequency

                order (int) – filter order

                filter_type (int) – filter type from special enum

                ripple (float) – ripple value for Chebyshev filter

    classmethod perform_bandstop(data, sampling_rate: int, start_freq: float, stop_freq: float, order: int, filter_type: int, ripple: float) → None

        apply band stop filter to provided data

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to filter, filter works in-place

                sampling_rate (int) – board’s sampling rate

                start_freq (float) – start frequency

                stop_freq (float) – stop frequency

                order (int) – filter order

                filter_type (int) – filter type from special enum

                ripple (float) – ripple value for Chebyshev filter

    classmethod remove_environmental_noise(data, sampling_rate: int, noise_type: float) → None

        remove env noise using notch filter

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to filter, filter works in-place

                sampling_rate (int) – board’s sampling rate

                noise_type (int) – noise type

    classmethod perform_rolling_filter(data, period: int, operation: int) → None

        smooth data using moving average or median

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to smooth, it works in-place

                period (int) – window size

                operation (int) – int value from AggOperation enum

    classmethod calc_stddev(data)

        calc stddev

        Parameters

            data (NDArray[Shape["*"], Float64]) – input array
        Returns

            stddev
        Return type

            float

    classmethod get_railed_percentage(data, gain: int)

        get railed percentage

        Parameters

                data (NDArray[Shape["*"], Float64]) – input array

                gain (int) – gain

        Returns

            railed percentage
        Return type

            float

    classmethod get_oxygen_level(ppg_ir, ppg_red, sampling_rate: int, coef1=1.5958422, coef2=- 34.6596622, coef3=112.6898759)

        get oxygen level from ppg

        Parameters

                ppg_ir (NDArray[Shape["*"], Float64]) – input array

                ppg_red (NDArray[Shape["*"], Float64]) – input array

                sampling_rate (int) – sampling rate

        Returns

            oxygen level
        Return type

            float

    classmethod get_heart_rate(ppg_ir, ppg_red, sampling_rate: int, fft_size: int)

        get heart rate

        Parameters

                ppg_ir (NDArray[Shape["*"], Float64]) – input array

                ppg_red (NDArray[Shape["*"], Float64]) – input array

                sampling_rate (int) – sampling rate

                fft_size (int) – recommended 8192

        Returns

            heart rate
        Return type

            float

    classmethod perform_downsampling(data, period: int, operation: int)

        perform data downsampling, it doesnt apply lowpass filter for you, it just aggregates several data points

        Parameters

                data (NDArray[Shape["*"], Float64]) – initial data

                period (int) – downsampling period

                operation (int) – int value from AggOperation enum

        Returns

            downsampled data
        Return type

            NDArray[Shape[“*”], Float64]

    classmethod perform_wavelet_transform(data, wavelet: int, decomposition_level: int, extension_type=<WaveletExtensionTypes.SYMMETRIC: 0>) → Tuple

        perform wavelet transform

        Parameters

                data (NDArray[Shape["*"], Float64]) – initial data

                wavelet (int) – use WaveletTypes enum

                decomposition_level (int) – level of decomposition

                extension_type – extension type, use WaveletExtensionTypes

        Returns

            tuple of wavelet coeffs in format [A(J) D(J) D(J-1) ….. D(1)] where J is decomposition level, A - app coeffs, D - detailed coeffs, and array with lengths for each block
        Return type

            tuple

    classmethod restore_data_from_wavelet_detailed_coeffs(data, wavelet, decomposition_level, level_to_restore)

        restore data from a single wavelet coeff

        Parameters

                data (NDArray[Shape["*"], Float64]) – initial data

                wavelet (int) – use WaveletTypes enum

                decomposition_level (int) – level of decomposition

                level_to_restore (int) – level of coeffs

        Returns

        Return type

            NDArray[Shape[“*”], Float64]

    classmethod detect_peaks_z_score(data, lag=5, threshold=3.5, influence=0.1)

        z score algorithm for peak detection

        Parameters

                data (NDArray[Shape["*"], Float64]) – initial data

                lag (int) – window size for averaging

                threshold (float) – in stddev units

                influence (float) – contribution of peaks to mean value, between 0 and 1

        Returns

        Return type

            NDArray[Shape[“*”], Float64]

    classmethod perform_inverse_wavelet_transform(wavelet_output: Tuple, original_data_len: int, wavelet: int, decomposition_level: int, extension_type=<WaveletExtensionTypes.SYMMETRIC: 0>)

        perform wavelet transform

        Parameters

                wavelet_output – tuple of wavelet_coeffs and array with lengths

                original_data_len (int) – len of signal before wavelet transform

                wavelet (int) – use WaveletTypes enum

                decomposition_level (int) – level of decomposition

                extension_type – extension type, use WaveletExtensionTypes

        Returns

            restored data
        Return type

            NDArray[Shape[“*”], Float64]

    classmethod perform_wavelet_denoising(data, wavelet: int, decomposition_level: int, wavelet_denoising=<WaveletDenoisingTypes.SURESHRINK: 1>, threshold=<ThresholdTypes.HARD: 1>, extension_type=<WaveletExtensionTypes.SYMMETRIC: 0>, noise_level=<NoiseEstimationLevelTypes.FIRST_LEVEL: 0>) → None

        perform wavelet denoising

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to denoise

                wavelet (int) – use WaveletTypes enum

                decomposition_level (int) – decomposition level

                wavelet_denoising (int) – use WaveletDenoisingTypes enum

                threshold (int) – use ThresholdTypes enum

                extension_type (int) – use WaveletExtensionTypes enum

                noise_level (int) – use NoiseEstimationLevelTypes enum

    classmethod get_csp(data, labels) → Tuple

        calculate filters and the corresponding eigenvalues using the Common Spatial Patterns

        Parameters

                data (NDArray[Shape[“*, *, *”], Float64]) – [epochs x channels x times]-shaped 3D array of data for two classes

                labels (NDArray[Shape["*"], Float64]) – n_epochs-length 1D array of zeros and ones that assigns class labels for each epoch. Zero corresponds to the first class

        Returns

            [channels x channels]-shaped 2D array of filters and [channels]-length 1D array of the corresponding eigenvalues
        Return type

            Tuple

    classmethod get_window(window_function: int, window_len: int)

        perform data windowing

        Parameters

                window_function – window function

                window_len – len of the window function

        Returns

            numpy array, len of the array is the same as data
        Return type

            NDArray[Shape[“*”], Float64]

    classmethod perform_fft(data, window: int)

        perform direct fft

        Parameters

                data (NDArray[Shape["*"], Float64]) – data for fft, len of data must be even

                window (int) – window function

        Returns

            numpy array of complex values, len of this array is N / 2 + 1
        Return type

            NDArray[Shape[“*”], Complex128]

    classmethod get_psd(data, sampling_rate: int, window: int) → Tuple

        calculate PSD

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to calc psd, len of data must be even

                sampling_rate (int) – sampling rate

                window (int) – window function

        Returns

            amplitude and frequency arrays of len N / 2 + 1
        Return type

            tuple

    classmethod get_psd_welch(data, nfft: int, overlap: int, sampling_rate: int, window: int) → Tuple

        calculate PSD using Welch method

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to calc psd

                nfft (int) – FFT Window size, must be even

                overlap (int) – overlap of FFT Windows, must be between 0 and nfft

                sampling_rate (int) – sampling rate

                window (int) – window function

        Returns

            amplitude and frequency arrays of len N / 2 + 1
        Return type

            tuple

    classmethod detrend(data, detrend_operation: int) → None

        detrend data

        Parameters

                data (NDArray[Shape["*"], Float64]) – data to calc psd

                detrend_operation (int) – Type of detrend operation

    classmethod get_band_power(psd: Tuple, freq_start: float, freq_end: float) → float

        calculate band power

        Parameters

                psd (tuple) – psd from get_psd

                freq_start (int) – start freq

                freq_end (int) – end freq

        Returns

            band power
        Return type

            float

    classmethod get_avg_band_powers(data, channels: List, sampling_rate: int, apply_filter: bool) → Tuple

        calculate avg and stddev of BandPowers across all channels, bands are 1-4,4-8,8-13,13-30,30-50

        Parameters

                data (NDArray[Shape[“*, *”], Float64]) – 2d array for calculation

                channels (List) – channels - rows of data array which should be used for calculation

                sampling_rate (int) – sampling rate

                apply_filter (bool) – apply bandpass and bandstop filtrers or not

        Returns

            avg and stddev arrays for bandpowers
        Return type

            tuple

    classmethod get_custom_band_powers(data, bands: List, channels: List, sampling_rate: int, apply_filter: bool) → Tuple

        calculate avg and stddev of BandPowers across selected channels

        Parameters

                data (NDArray[Shape[“*, *”], Float64]) – 2d array for calculation

                bands (List) – List of typles with bands to use. E.g [(1.5, 4.0), (4.0, 8.0), (8.0, 13.0), (13.0, 30.0), (30.0, 45.0)]

                channels (List) – channels - rows of data array which should be used for calculation

                sampling_rate (int) – sampling rate

                apply_filter (bool) – apply bandpass and bandstop filtrers or not

        Returns

            avg and stddev arrays for bandpowers
        Return type

            tuple

    classmethod perform_ica(data, num_components: int, channels=None) → Tuple

        perform ICA

        Parameters

                data (NDArray[Shape[“*, *”], Float64]) – 2d array for calculation

                num_components (int) – number of components

                channels (List) – channels - rows of data array which should be used for calculation, if None use all

        Returns

            w, k, a, s matrixes as a tuple
        Return type

            tuple

    classmethod perform_ifft(data)

        perform inverse fft

        Parameters

            data (NDArray[Shape["*"], Complex128]) – data from fft
        Returns

            restored data
        Return type

            NDArray[Shape[“*”], Float64]

    classmethod get_nearest_power_of_two(value: int) → int

        calc nearest power of two

        Parameters

            value (int) – input value
        Returns

            nearest power of two
        Return type

            int

    classmethod write_file(data, file_name: str, file_mode: str) → None

        write data to file, in file data will be transposed

        Parameters

                data (NDArray[Shape[“*, *”], Float64]) – data to store in a file

                file_name (str) – file name to store data

                file_mode (str) – ‘w’ to rewrite file or ‘a’ to append data to file

    classmethod read_file(file_name: str)

        read data from file

        Parameters

            file_name (str) – file name to read
        Returns

            2d numpy array with data from this file, data will be transposed to original dimensions
        Return type

            NDArray[Shape[“*, *”], Float64]

    classmethod get_version() → str

        get version of brainflow libraries

        Returns

            version
        Return type

            str

        :raises BrainFlowError

    classmethod log_message(log_level: int, message: str) → None

        write your own log message to BrainFlow logger, use it if you wanna have single logger for your own code and BrainFlow’s code

        Parameters

                log_level – log level

                message (str) – message

brainflow.ml_model

class brainflow.ml_model.BrainFlowMetrics(value)

    Bases: enum.IntEnum

    Enum to store all supported metrics

    MINDFULNESS = 0

    RESTFULNESS = 1

    USER_DEFINED = 2

class brainflow.ml_model.BrainFlowClassifiers(value)

    Bases: enum.IntEnum

    Enum to store all supported classifiers

    DEFAULT_CLASSIFIER = 0

    DYN_LIB_CLASSIFIER = 1

    ONNX_CLASSIFIER = 2

class brainflow.ml_model.BrainFlowModelParams(metric, classifier)

    Bases: object

    inputs parameters for prepare_session method

    Parameters

            metric (int) – metric to calculate

            classifier (int) – classifier to use

            file (str) – file to load model

            other_info (str) – additional information

            output_name (str) – output node name

            max_array_size (int) – max array size to preallocate

class brainflow.ml_model.MLModel(model_params: brainflow.ml_model.BrainFlowModelParams)

    Bases: object

    MLModel class used to calc derivative metrics from raw data

    Parameters

        model_params (BrainFlowModelParams) – Model Params

    classmethod set_log_level(log_level: int) → None

        set BrainFlow log level, use it only if you want to write your own messages to BrainFlow logger, otherwise use enable_ml_logger, enable_dev_ml_logger or disable_ml_logger

        Parameters

            log_level (int) – log level, to specify it you should use values from LogLevels enum

    classmethod enable_ml_logger() → None

        enable ML Logger with level INFO, uses stderr for log messages by default

    classmethod disable_ml_logger() → None

        disable BrainFlow Logger

    classmethod enable_dev_ml_logger() → None

        enable ML Logger with level TRACE, uses stderr for log messages by default

    classmethod set_log_file(log_file: str) → None

        redirect logger from stderr to file, can be called any time

        Parameters

            log_file (str) – log file name

    classmethod log_message(log_level: int, message: str) → None

        write your own log message to BrainFlow logger, use it if you wanna have single logger for your own code and BrainFlow’s code

        Parameters

                log_level – log level

                message (str) – message

    classmethod release_all() → None

        release all classifiers

    classmethod get_version() → str

        get version of brainflow libraries

        Returns

            version
        Return type

            str

        :raises BrainFlowError

    prepare() → None

        prepare classifier

    release() → None

        release classifier

    predict(data) → List

        calculate metric from data

        Parameters

            data (NDArray[Shape["*"], Float64]) – input array
        Returns

            metric value
        Return type

            List

